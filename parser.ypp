%{
  #include <stdlib.h> /* Required to compile with C++ */
  #include <stdio.h>
  #include <ctype.h>
  #include <math.h>
  #include "global.h"
  #include "TreeNode.h"
  extern int yylex(void);
  extern int yyparse(); /* Required to compile with C++ */
  extern void yyerror(char*); /* Required to compile with C++ */
%}

%token  NUM DONE DIV MOD ID WHILE IF PRINT READ

%right '='
%left '?' ':'
%left '<' '>'
%left '+' '-'
%left '*' '/' MOD '%'
%right '&' '|'
%left '^'

%nonassoc IFX
%nonassoc ELSE

%union {
  int i;
  TreeNode* p;
}

%type <p> expr;
%type <p> statement;
%type <p> statement_list;

%type <i> NUM;
%type <i> ID;

%%

program:
        statement_list DONE {
            TreeNode::printTree($1);
            //TreeNode::executeTree($1);

            StackMachine sm;
            TreeNode::generateStackMachine($1, sm);
            sm.append(Instruction(halt));
            try {
                sm.showstate();
                sm.list_program();
                sm.set_trace(0);
                printf("RUNNING ...\n\n");
                sm.run();
                printf("\n... FINISHED RUNNING!\n\n");
                sm.showstate();
            }
            catch(Exception& e) {
                std::cout << "*** Exception caught: " << e.message() << std::endl;
                sm.showstate();
                sm.list_program();
            }
            catch(...) {
                std::cout << "Unknown exception." << std::endl;
            }
            printf("\nFINISHED\n"); exit(0);
        }
        ;

statement:
          ';'                                       { $$ = TreeNode::makeNode(';'); }
        | expr ';'                                  { $$ = $1 }
        | '{' statement_list '}'                    { $$ = $2 }
        | WHILE '(' expr ')' statement              { $$ = TreeNode::makeNode(WHILE, $3, $5); }
        | IF '(' expr ')' statement %prec IFX       { $$ = TreeNode::makeNode(IF, $3, $5); }
        | IF '(' expr ')' statement ELSE statement  { $$ = TreeNode::makeNode(IF, $3, $5, $7); }
        | PRINT '(' expr ')' ';'                    { $$ = TreeNode::makeNode(PRINT, $3); }
        | READ '(' ID ')' ';'                       { $$ = TreeNode::makeNode(READ, TreeNode::makeLeaf(ID, $3)); }
        ;

statement_list:
        statement                   { $$ = $1 }
        | statement_list statement  { $$ = TreeNode::makeNode(';', $1, $2); }
        ;

expr:
        NUM                       { $$ = TreeNode::makeLeaf(NUM, $1) }
        | ID                      { $$ = TreeNode::makeLeaf(ID, $1) }
        | ID '=' expr             { $$ = TreeNode::makeNode('=', TreeNode::makeLeaf(ID, $1), $3) }
        | expr '+' expr           { $$ = TreeNode::makeNode('+', $1, $3) }
        | expr '-' expr           { $$ = TreeNode::makeNode('-', $1, $3) }
        | expr '*' expr           { $$ = TreeNode::makeNode('*', $1, $3) }
        | expr '/' expr           { $$ = TreeNode::makeNode('/', $1, $3) }
        | expr '^' expr           { $$ = TreeNode::makeNode('^', $1, $3) }
        | expr MOD expr           { $$ = TreeNode::makeNode(MOD, $1, $3) }
        | expr '%' expr           { $$ = TreeNode::makeNode('%', $1, $3) }
        | expr '&' expr           { $$ = TreeNode::makeNode('&', $1, $3) }
        | expr '|' expr           { $$ = TreeNode::makeNode('|', $1, $3) }
        | expr '<' expr           { $$ = TreeNode::makeNode('<', $1, $3) }
        | expr '>' expr           { $$ = TreeNode::makeNode('>', $1, $3) }
        | '(' expr ')'            { $$ = $2; }
        ;

%%

void yyerror(char *s) {
  fprintf(stderr, "%s\n", s);
}

int yylex(void) {
  return lexan();
}

void parse(){
    yyparse();
}

